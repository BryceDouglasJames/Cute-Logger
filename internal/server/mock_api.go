// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/BryceDouglasJames/Cute-Logger/api (interfaces: Log_ProduceStreamServer)
//
// Generated by this command:
//
//	mockgen -package mock_api -destination ./mock_api.go github.com/BryceDouglasJames/Cute-Logger/api Log_ProduceStreamServer
//

// Package mock_api is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	record "github.com/BryceDouglasJames/Cute-Logger/api"
	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockLog_ProduceStreamServer is a mock of Log_ProduceStreamServer interface.
type MockLog_ProduceStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockLog_ProduceStreamServerMockRecorder
}

// MockLog_ProduceStreamServerMockRecorder is the mock recorder for MockLog_ProduceStreamServer.
type MockLog_ProduceStreamServerMockRecorder struct {
	mock *MockLog_ProduceStreamServer
}

// NewMockLog_ProduceStreamServer creates a new mock instance.
func NewMockLog_ProduceStreamServer(ctrl *gomock.Controller) *MockLog_ProduceStreamServer {
	mock := &MockLog_ProduceStreamServer{ctrl: ctrl}
	mock.recorder = &MockLog_ProduceStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog_ProduceStreamServer) EXPECT() *MockLog_ProduceStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockLog_ProduceStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockLog_ProduceStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockLog_ProduceStreamServer) Recv() (*record.ProduceRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*record.ProduceRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockLog_ProduceStreamServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockLog_ProduceStreamServer) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockLog_ProduceStreamServerMockRecorder) RecvMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockLog_ProduceStreamServer) Send(arg0 *record.ProduceResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockLog_ProduceStreamServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockLog_ProduceStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockLog_ProduceStreamServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockLog_ProduceStreamServer) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockLog_ProduceStreamServerMockRecorder) SendMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockLog_ProduceStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockLog_ProduceStreamServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockLog_ProduceStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockLog_ProduceStreamServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockLog_ProduceStreamServer)(nil).SetTrailer), arg0)
}
